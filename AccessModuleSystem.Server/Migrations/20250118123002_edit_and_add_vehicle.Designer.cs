// <auto-generated />
using System;
using AccessModuleSystem.Server;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AccessModuleSystem.Server.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250118123002_edit_and_add_vehicle")]
    partial class edit_and_add_vehicle
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AccessModuleSystem.Models.AccessEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessType")
                        .HasColumnType("integer");

                    b.Property<Guid>("CameraId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CameraId");

                    b.HasIndex("VehicleId");

                    b.ToTable("AccessEvents");
                });

            modelBuilder.Entity("AccessModuleSystem.Models.Camera", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Cameras");
                });

            modelBuilder.Entity("AccessModuleSystem.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenExpires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("VehicleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d1b0f2cc-79b3-4b69-928c-8b263f2ab9c4"),
                            CreatedAt = new DateTime(2023, 6, 16, 0, 37, 19, 0, DateTimeKind.Utc),
                            Email = "admin@ams.ru",
                            Name = "Павел",
                            PasswordHash = "admin",
                            Role = 0,
                            Surname = "Маркелов",
                            Username = "admin"
                        },
                        new
                        {
                            Id = new Guid("d1b0f4cc-79b3-4b69-988c-8b263f2ab9c4"),
                            CreatedAt = new DateTime(2023, 5, 16, 0, 37, 19, 0, DateTimeKind.Utc),
                            Email = "user@ams.ru",
                            Name = "Иван",
                            PasswordHash = "user",
                            Role = 1,
                            Surname = "Иванов",
                            Username = "user"
                        });
                });

            modelBuilder.Entity("AccessModuleSystem.Models.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeactivationAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d1b0f2cc-14b3-4b69-928c-8b263f3ab9c4"),
                            CreatedAt = new DateTime(2023, 5, 16, 0, 37, 19, 0, DateTimeKind.Utc),
                            LicensePlate = "A726BC 30 RUS",
                            OwnerName = "Петров Петр",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("d1b0f2cc-12b3-4b69-928c-8b263f3ab9c4"),
                            CreatedAt = new DateTime(2023, 5, 16, 0, 37, 19, 0, DateTimeKind.Utc),
                            LicensePlate = "A123BC 30 RUS",
                            OwnerName = "Иванов Иван Иванович",
                            Status = 0
                        });
                });

            modelBuilder.Entity("AccessModuleSystem.Models.AccessEvent", b =>
                {
                    b.HasOne("AccessModuleSystem.Models.Camera", "Camera")
                        .WithMany()
                        .HasForeignKey("CameraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccessModuleSystem.Models.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Camera");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("AccessModuleSystem.Models.User", b =>
                {
                    b.HasOne("AccessModuleSystem.Models.Vehicle", "Vehicle")
                        .WithOne()
                        .HasForeignKey("AccessModuleSystem.Models.User", "VehicleId");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("AccessModuleSystem.Models.Vehicle", b =>
                {
                    b.HasOne("AccessModuleSystem.Models.User", "User")
                        .WithOne()
                        .HasForeignKey("AccessModuleSystem.Models.Vehicle", "UserId");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
