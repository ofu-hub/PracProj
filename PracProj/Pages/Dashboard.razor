@page "/dashboard"
@using PracProj.Models

<PageTitle>Главная панель управления</PageTitle>

<h1>Главная панель управления</h1>

<Chart Config="_config1" @ref="_chart1" Height="400px"></Chart>

<hr />

@code {
    // todo: Mock data
    private List<AccessEvents> accessEventsList = new List<AccessEvents>() 
    {
        new AccessEvents() {
            Timestamp = DateTime.UtcNow,
            AccessType = Models.Enums.AccessType.Entry,
            Status = Models.Enums.AccessStatus.Granted
        },
        new AccessEvents() {
            Timestamp = DateTime.UtcNow.AddHours(3),
            AccessType = Models.Enums.AccessType.Entry,
            Status = Models.Enums.AccessStatus.Denied
        },
        new AccessEvents() {
            Timestamp = DateTime.UtcNow.AddHours(2),
            AccessType = Models.Enums.AccessType.Exit,
            Status = Models.Enums.AccessStatus.Granted
        },
        new AccessEvents() {
            Timestamp = DateTime.UtcNow.AddHours(1),
            AccessType = Models.Enums.AccessType.Entry,
            Status = Models.Enums.AccessStatus.Denied
        },
        new AccessEvents() {
            Timestamp = DateTime.UtcNow.AddMinutes(22),
            AccessType = Models.Enums.AccessType.Exit,
            Status = Models.Enums.AccessStatus.Granted
        },
        new AccessEvents() {
            Timestamp = DateTime.UtcNow.AddMinutes(12),
            AccessType = Models.Enums.AccessType.Exit,
            Status = Models.Enums.AccessStatus.Granted
        },
        new AccessEvents() {
            Timestamp = DateTime.UtcNow.AddMinutes(45),
            AccessType = Models.Enums.AccessType.Entry,
            Status = Models.Enums.AccessStatus.Granted
        }
    };
    private Dictionary<string, int> countEvents = new Dictionary<string, int>();

    private PieChartConfig? _config1;
    private Chart? _chart1;

    private void CountEvents()
    {
        for (var i = 0; i < accessEventsList.Count; i++) {
            if (countEvents.ContainsKey(accessEventsList[i].AccessType.ToString()))
                countEvents[accessEventsList[i].AccessType.ToString()]++;
            else {
                var t = Enum.GetName(typeof(PracProj.Models.Enums.AccessType), (int)accessEventsList[i].AccessType)!;
                countEvents.Add(t, 0);
            }

            Console.WriteLine(countEvents[accessEventsList[i].AccessType.ToString()]);
        }
    }

    private List<decimal?> ConvretValues() 
    {
        var list = new List<decimal?>();
        var valuesList = countEvents.Values.ToList();

        foreach (var item in valuesList)
        {
            list.Add(item);
        }

        return list;
    }

    protected override async Task OnInitializedAsync()
    {
        CountEvents();

        _config1 = new PieChartConfig()
            {
                Options = new PieOptions()
                {
                    Responsive = true,
                    MaintainAspectRatio = false
                }
            };

        _config1.Data.Labels = countEvents.Keys.ToList();
        _config1.Data.Datasets.Add(new PieDataset()
            {
                Label = "My First Dataset",
                Data = ConvretValues(),
                BackgroundColor = new List<string>()
                {
                    "rgb(255, 99, 132)",
                    "rgb(255, 159, 64)",
                    "rgb(255, 205, 86)",
                    "rgb(75, 192, 192)",
                    "rgb(54, 162, 235)",
                    "rgb(153, 102, 255)",
                    "rgb(201, 203, 207)"
                },
                HoverOffset = 4
            });
    }
}
