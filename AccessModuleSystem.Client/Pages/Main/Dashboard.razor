@page "/dashboard"
@using AccessModuleSystem.Models.Enums
@using AccessModuleSystem.Contracts.AccessEvent
@using AccessModuleSystem.Client.Extensions

@inject HttpClient HttpClient

@attribute [Authorize]

<PageTitle>Главная панель управления</PageTitle>

<h1>Главная панель управления</h1>

<hr />
@if (isLoading)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Идет загрузка, пожалуйста, подождите...</span>
        </div>
    </div>
}
else {
    @if (accessEventsList is not null)
    {
        <div class="accessEvents">
            <div class="pieChart">
                <h3>Круговая диаграмма активности</h3>
                <Chart Width="400px" Config="_config1" @ref="_chart1"></Chart>
            </div>

            <div class="dataTable">
                <h3>Последние события доступа</h3>
                <DataTable TModel="AccessEventReadDTO" Items="accessEventsList" AllowRowSelection="true"
                SelectedItem="selectedItem" RowClickedEvent="SelectedItemCallBack" SelectedItemCssClass="bg-info">
                    <DataTableColumn TModel="AccessEventReadDTO" CustomTitle="Номерной знак автомобиля" Property="(e) => e.LicensePlate" />
                    <DataTableColumn TModel="AccessEventReadDTO" CustomTitle="Тип события" Property="(e) => e.AccessType.GetDisplayName()" />
                    <DataTableColumn TModel="AccessEventReadDTO" CustomTitle="Статус доступа" Property="(e) => e.Status.GetDisplayName()" />
                    <DataTableColumn TModel="AccessEventReadDTO" CustomTitle="Время события" Property="(e) => e.Timestamp.ToLongDateString()" />
                </DataTable>
                <div class="d-grid gap-2">
                    <Button Type="ButtonType.Link" Color="ButtonColor.Info" To="/events"> Просмотреть все события </Button>
                </div>
            </div>
        </div>

        <hr />

        <div class="selectedViewItem">
            <h3>Информация об выбранном событии</h3>
            @if (selectedItem is null)
            {
                <p>Событие не выбрано. Выберите событие из таблицы "Последние события доступа"</p>
            }
            else
            {
                <Card Style="width:auto;">
                    <CardBody>
                        <CardTitle>Идентификатор события #@selectedItem.Id</CardTitle>
                    </CardBody>
                    <ul class="list-group list-group-flush">
                        <li class="list-group-item">
                            <strong>Транспорт</strong>
                            <p>@selectedItem.LicensePlate</p> <Button Type="ButtonType.Link" Color="ButtonColor.Info" Outline="true" Size="ButtonSize.Small" To="@string.Format($"/vehicles/{selectedItem.VehicleId.ToString()}")"> Подробнее </Button>
                        </li>
                        <li class="list-group-item">
                            <strong>Время события</strong>
                            <p>@selectedItem.Timestamp</p>
                        </li>
                        <li class="list-group-item">
                            <strong>Тип события</strong>
                            <p>@selectedItem.AccessType.GetDisplayName()</p>
                        </li>
                        <li class="list-group-item">
                            <strong>Статус доступа</strong>
                            <p>
                                @if (selectedItem.Status is AccessStatus.Granted)
                                {
                                    <Badge Color="BadgeColor.Success">Предоставленный</Badge>
                                }
                                else
                                {
                                    <Badge Color="BadgeColor.Danger">Отклонен</Badge>
                                }
                            </p>

                        </li>
                        <li class="list-group-item">
                            <strong>Камера фиксирующая</strong>
                            <p>@selectedItem.CameraId</p>
                        </li>
                    </ul>
                    <CardBody class="d-grid gap-2">
                        <Button Color="ButtonColor.Primary" Type="ButtonType.Link" To=@string.Format($"/events/{selectedItem.Id.ToString()}")>Подробнее о событии</Button>
                        <Button Color="ButtonColor.Secondary">Открыть камеру</Button>
                    </CardBody>
                </Card>
            }
        </div>
    }
    else
    {
        <div class="accessEvents justify-content-center align-content-center">
            <h3>Список событий к сожалению пустой :(</h3>
        </div>
    }
}

@code {
    private bool isLoading = true;

    private List<AccessEventReadDTO>? accessEventsList;
    private Dictionary<string, int> countEvents = new Dictionary<string, int>();

    private AccessEventReadDTO? selectedItem = null;

    private PieChartConfig? _config1;
    private Chart? _chart1;

    private void SelectedItemCallBack(AccessEventReadDTO item)
    {
        selectedItem = item;
    }

    private void CountEvents()
    {
        for (var i = 0; i < accessEventsList?.Count; i++) {
            var nameEnum = Enum.GetName(typeof(AccessType), (int)accessEventsList[i].AccessType)!;

            if (countEvents.ContainsKey(accessEventsList[i].AccessType.ToString()))
                countEvents[nameEnum]++;
            else 
                countEvents.Add(nameEnum, 1);
        }
    }

    private List<decimal?> ConvretValues() 
    {
        var list = new List<decimal?>();
        var valuesList = countEvents.Values.ToList();

        foreach (var item in valuesList)
        {
            list.Add(item);
        }

        return list;
    }

    private void ConfigChartPipeEvents()
    {
        _config1 = new PieChartConfig()
            {
                Options = new PieOptions()
                {
                    Responsive = true,
                    MaintainAspectRatio = false
                }
            };

        _config1.Data.Labels = countEvents.Keys.ToList();
        _config1.Data.Datasets.Add(new PieDataset()
            {
                Label = string.Empty,
                Data = ConvretValues(),
                BackgroundColor = new List<string>()
                {
                    "rgb(255, 99, 132)",
                    "rgb(255, 159, 64)",
                    "rgb(255, 205, 86)",
                    "rgb(75, 192, 192)",
                    "rgb(54, 162, 235)",
                    "rgb(153, 102, 255)",
                    "rgb(201, 203, 207)"
                },
                HoverOffset = 4
            });
    }

    protected override async Task OnInitializedAsync()
    {
        var response = await HttpClient.GetAsync("api/AccessEvent");

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<List<AccessEventReadDTO>>();

            if (result != null && result.Count > 0)
            {
                accessEventsList = result.Take(5).OrderByDescending(x => x.Timestamp).ToList();
                CountEvents();
                ConfigChartPipeEvents();
                isLoading = false;
            }
        }
    }
}
