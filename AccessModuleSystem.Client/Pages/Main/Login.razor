@page "/login"

<PageTitle>Авторизация</PageTitle>

@using AccessModuleSystem.Client.Providers
@using AccessModuleSystem.Client.Services
@using AccessModuleSystem.Contracts.Auth

@inject ITokenService LocalStorage
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="d-flex justify-content-center align-items-center" style="height: 100vh; overflow: hidden;">
    <div class="card p-4 shadow-lg" style="width: 400px;">
        <h3 class="text-center mb-4">Авторизация</h3>

        <EditForm Model="@loginModel" OnValidSubmit="@HandleLoginSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger mb-3" />

            <div class="form-group mb-3">
                <label for="username" class="form-label">Логин</label>
                <InputText id="username" class="form-control" @bind-Value="loginModel.Username" placeholder="Введите ваш логин" />
            </div>

            <div class="form-group mb-4">
                <label for="password" class="form-label">Пароль</label>
                <InputText type="password" id="password" class="form-control" @bind-Value="loginModel.Password" placeholder="Введите ваш пароль" />
            </div>

            @* <button type="submit" class="btn btn-primary w-100">Войти</button> *@
            <Button Class="w-100" Size="ButtonSize.Medium" Type="ButtonType.Submit" Color="ButtonColor.Primary" Loading="isLoading">
                <ChildContent>Войти</ChildContent>
                <LoadingTemplate>
                    <span class="spinner-grow spinner-border-sm" role="status" aria-hidden="true"></span>
                    Авторизация...
                </LoadingTemplate>
            </Button>
        </EditForm>

        @if (isError)
        {
            <div class="alert alert-danger mt-3 text-center">Invalid username or password</div>
        }
    </div>
</div>

@code {
    private bool isLoading = false;

    private LoginDto loginModel = new LoginDto();
    private bool isError = false;

    private async Task HandleLoginSubmit()
    {
        isError = false;
        isLoading = true;

        var response = await HttpClient.PostAsJsonAsync("api/auth", loginModel);

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<LoginResultDto>();
            if (result?.Token != null)
            {
                await LocalStorage.SetToken(result.Token);

                // Уведомляем провайдер об изменении состояния
                if (AuthenticationStateProvider is CustomAuthenticationStateProvider customProvider)
                {
                    customProvider.StateChanged();
                }

                NavigationManager.NavigateTo("/", true);
            }
            else
            {
                isError = true;
            }
        }
        else
        {
            isError = true;
        }
    }
}
