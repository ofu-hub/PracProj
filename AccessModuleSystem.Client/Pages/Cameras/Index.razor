@page "/cameracontrol"
@using AccessModuleSystem.Models.Enums
@using AccessModuleSystem.Contracts.Camera
@using AccessModuleSystem.Client.Extensions

@inject HttpClient HttpClient

@attribute [Authorize]

<PageTitle>Управление камерами</PageTitle>

<h1>Управление камерами</h1>

<hr />
@if (isLoading) {
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Идет загрузка, пожалуйста, подождите...</span>
        </div>
    </div>
}
else 
{
    <div class="actionMenu sticky-top">
        <Button Type="ButtonType.Link" Color="ButtonColor.Primary" To="/cameracontrol/add"> Зарегистрировать камеру в системе </Button>
    </div>

    <hr />

    @if (camerasList is not null)
    {
        <div class="d-flex flex-wrap">
            @foreach (var camera in camerasList)
            {
                <div class="card my-2" style="flex: 1 1 calc(25% - 1rem); max-width: calc(25% - 1rem);">
                    <svg class="bd-placeholder-img card-img-top" width="100%" height="180" xmlns="http://www.w3.org/2000/svg" role="img" aria-label="Placeholder: Image cap" preserveAspectRatio="xMidYMid slice" focusable="false">
                        <title>Placeholder</title>
                        <rect width="100%" height="100%" fill="#868e96"></rect>
                        <text x="50%" y="50%" fill="#dee2e6" dy=".3em">Image cap</text>
                    </svg>
                    <div class="card-body">
                        <h5 class="card-title">@camera.Id</h5>
                        <h6 class="card-subtitle mb-2 text-muted">
                            <span class="badge rounded-pill @GetBadgeClass(camera.Status)">
                                @camera.Status.GetDisplayName()
                            </span>
                        </h6>
                        <p class="card-text">@camera.Location</p>
                        <a href="#" class="btn btn-primary">Открыть камеру</a>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="accessEvents justify-content-center align-content-center">
            <h3>Список камер к сожалению пустой :(</h3>
        </div>
    }
}

@code {
    private bool isLoading = true;

    private List<CameraReadDTO>? camerasList;

    private void AddCamera() { }

    private string GetBadgeClass(CameraStatus status)
    {
        return status switch
        {
            CameraStatus.Active => "bg-success",
            CameraStatus.Inactive => "bg-danger",
            CameraStatus.Maintenance => "bg-warning",
            CameraStatus.Error => "bg-secondary",
            _ => "bg-secondary"
        };
    }

    protected override async Task OnInitializedAsync()
    {
        var response = await HttpClient.GetAsync("api/cameras");

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<List<CameraReadDTO>>();

            if (result != null && result.Count > 0)
            {
                camerasList = result.ToList();
                isLoading = false;
            }
        }
    }
}
