@page "/vehicles"
@using AccessModuleSystem.Models.Enums
@using AccessModuleSystem.Contracts.Vehicle
@using AccessModuleSystem.Client.Extensions

@inject HttpClient HttpClient
@inject NavigationManager Navigation

<PageTitle>Управление транспортными средствами</PageTitle>

<h1>Управление транспортными средствами</h1>

<hr />

@if (isLoading)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Идет загрузка, пожалуйста, подождите...</span>
        </div>
    </div>
}
else
{
    <div class="actionMenu sticky-top">
        <Button Type="ButtonType.Link" Color="ButtonColor.Primary" To="/vehicles/add"> Зарегистрировать транспортное средство </Button>
        <Button Type="ButtonType.Button" Color="ButtonColor.Danger" @onclick="DeleteSelectedVehicles"> Удалить выбранных </Button>
        <Button Type="ButtonType.Button" Color="ButtonColor.Warning" @onclick="DeactivateSelectedVehicles"> Деактивировать выбранных </Button>
    </div>

    <hr />

    <Grid TItem="VehicleReadDTO"
          Class="table table-hover table-bordered table-striped mt-2"
          Data="vehiclesList"
          AllowFiltering="true"
          AllowPaging="true"
          AllowSorting="true"
          AllowSelection="true"
          SelectionMode="GridSelectionMode.Multiple"
          SelectedItemsChanged="OnSelectedItemsChanged"
          Responsive="true"
          PageSize="@pageSize">

        <GridColumns>
            <GridColumn TItem="VehicleReadDTO" HeaderText="Идентификатор" PropertyName="Id" SortKeySelector="item => item.Id">
                @context.Id
            </GridColumn>
            <GridColumn TItem="VehicleReadDTO" HeaderText="Имя владельца" PropertyName="OwnerName" SortKeySelector="item => item.OwnerName">
                @context.OwnerName
            </GridColumn>
            <GridColumn TItem="VehicleReadDTO" HeaderText="Номерной знак автомобиля" PropertyName="LicensePlate" SortKeySelector="item => item.LicensePlate">
                @context.LicensePlate
            </GridColumn>
            <GridColumn TItem="VehicleReadDTO" HeaderText="Статус разрешения" PropertyName="Status" SortKeySelector="item => item.Status">
                @context.Status.GetDisplayName()
            </GridColumn>
            <GridColumn TItem="VehicleReadDTO" HeaderText="Дата создания" PropertyName="CreatedAt" SortKeySelector="item => item.CreatedAt">
                @context.CreatedAt
            </GridColumn>
            <GridColumn TItem="VehicleReadDTO" HeaderText="Дата деактивации" PropertyName="DeactivationAt" SortKeySelector="item => item.DeactivationAt">
                @if (context.DeactivationAt is null)
                {
                    <text>-</text>
                }
                else
                {
                    @context.DeactivationAt
                }
            </GridColumn>
            <GridColumn TItem="VehicleReadDTO" HeaderText="Действия" PropertyName="Id" Filterable="false" Class="d-grid gap-2">
                <Button Type="ButtonType.Button" Color="ButtonColor.Danger" Size="ButtonSize.Small" @onclick="() => DeleteVehicle(context.Id)">
                    Удалить
                </Button>
                <Button Type="ButtonType.Link" Color="ButtonColor.Secondary" Size="ButtonSize.Small" To=@string.Format($"/vehicles/{context.Id}?edit=true")>
                    Редактировать
                </Button>
                <Button Type="ButtonType.Button" Color="ButtonColor.Warning" Size="ButtonSize.Small" @onclick="() => DeactivateVehicle(context.Id)">
                    Деактивировать
                </Button>
                <Button Type="ButtonType.Link" Color="ButtonColor.Info" Size="ButtonSize.Small" To=@string.Format($"/vehicles/{context.Id}")>
                    Подробнее
                </Button>
            </GridColumn>
        </GridColumns>
    </Grid>

    <div class="mt-3">
        <Button Type="ButtonType.Button" Color="ButtonColor.Primary" @onclick="() => ChangeSize(5)">Кол-во записей 5</Button>
        <Button Type="ButtonType.Button" Color="ButtonColor.Secondary" @onclick="() => ChangeSize(10)">Кол-во записей 10</Button>
        <Button Type="ButtonType.Button" Color="ButtonColor.Secondary" @onclick="() => ChangeSize(15)">Кол-во записей 15</Button>
    </div>
}

@code {
    private bool isLoading = true;

    private List<VehicleReadDTO>? vehiclesList = new();
    private HashSet<VehicleReadDTO> selectedVehicles = new();
    private int pageSize = 5;

    protected override async Task OnInitializedAsync()
    {
        await LoadVehicles();
    }

    private async Task LoadVehicles()
    {
        isLoading = true;
        try
        {
            vehiclesList = await HttpClient.GetFromJsonAsync<List<VehicleReadDTO>>("api/vehicles");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Ошибка загрузки данных: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ChangeSize(int size)
    {
        pageSize = size;
    }

    private async Task DeleteVehicle(Guid vehicleId)
    {
        isLoading = true;
        try
        {
            var response = await HttpClient.DeleteAsync($"api/vehicles/{vehicleId}");
            if (response.IsSuccessStatusCode)
            {
                vehiclesList?.RemoveAll(v => v.Id == vehicleId);
            }
            // Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Ошибка удаления: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task DeactivateVehicle(Guid vehicleId)
    {
        isLoading = true;
        try
        {
            var vehicle = vehiclesList?.FirstOrDefault(v => v.Id == vehicleId);
            if (vehicle is not null)
            {
                vehicle.Status = PermissionStatus.Inactive;
                vehicle.DeactivationAt = DateTime.UtcNow;
                var response = await HttpClient.PutAsJsonAsync($"api/vehicles/{vehicle.Id}", vehicle);
            }
            // Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Ошибка деактивации: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task DeleteSelectedVehicles()
    {
        foreach (var vehicle in selectedVehicles)
        {
            await DeleteVehicle(vehicle.Id);
        }
    }

    private async Task DeactivateSelectedVehicles()
    {
        foreach (var vehicle in selectedVehicles)
        {
            await DeactivateVehicle(vehicle.Id);
        }
    }

    private void OnSelectedItemsChanged(HashSet<VehicleReadDTO> selectedItems)
    {
        selectedVehicles = selectedItems;
    }
}
