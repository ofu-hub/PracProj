@page "/vehicles/{id:Guid}"
@using AccessModuleSystem.Models.Enums
@using AccessModuleSystem.Contracts.Vehicle
@using AccessModuleSystem.Client.Extensions
@using System.Globalization

@inject HttpClient HttpClient

@attribute [Authorize]

<PageTitle>Детали транспортного средства</PageTitle>

@if (isLoading)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Идет загрузка, пожалуйста, подождите...</span>
        </div>
    </div>
}
else
{
    if (vehicleDetail is not null)
    {
        <h1>Детали транспортного средства №@vehicleDetail.Id</h1>

        <hr />
        <div class="card card-tight mb-1 card-top-no-radius">
            <div class="card-header">
                <h4>Информация о транспорте</h4>
            </div>
            <div class="card-body">
                <dl class="row">
                    <dt class="col-sm-2">Имя владельца:</dt>
                    <dd class="col-sm-10">@vehicleDetail.OwnerName</dd>

                    <dt class="col-sm-2">Номерной знак автомобиля:</dt>
                    <dd class="col-sm-10">@vehicleDetail.LicensePlate</dd>

                    <dt class="col-sm-2">Статус разрешения:</dt>
                    <dd class="col-sm-10">@vehicleDetail.Status.GetDisplayName()</dd>

                    <dt class="col-sm-2">Дата добавления:</dt>
                    <dd class="col-sm-10">@vehicleDetail.CreatedAt.ToLongDateString()</dd>

                    <dt class="col-sm-2">Дата деактивации:</dt>
                    <dd class="col-sm-10">@vehicleDetail.DeactivationAt?.ToLongDateString()</dd>
                </dl>
            </div>
        </div>

        @if (vehicleDetail.User is not null) 
        {
            <div class="card card-tight mb-1 card-bottom-no-radius">
                <div class="card-header">
                    <h4>Информация о пользователе</h4>
                </div>
                <div class="card-body">
                    <dl class="row">
                        <dt class="col-sm-2">Логин:</dt>
                        <dd class="col-sm-10">@vehicleDetail.User.Username</dd>

                        <dt class="col-sm-2">Электронный адрес:</dt>
                        <dd class="col-sm-10">@vehicleDetail.User.Email</dd>

                        <dt class="col-sm-2">Дата создания аккаунта:</dt>
                        <dd class="col-sm-10">@vehicleDetail.User.CreatedAt</dd>

                        <dt class="col-sm-2">ФИО:</dt>
                        <dd class="col-sm-10">@string.Format($"{vehicleDetail.User.Surname} {vehicleDetail.User.Name} {vehicleDetail.User.Patronymic}")</dd>

                        <dt class="col-sm-2">Роль в системе:</dt>
                        <dd class="col-sm-10">@vehicleDetail.User.Role.GetDisplayName()</dd>

                        <dt class="col-sm-2">Блокировка:</dt>
                        <dd class="col-sm-10">@vehicleDetail.User.IsBlocked</dd>
                    </dl>
                </div>
            </div>
        }
    }
    else
    {
        <div class="accessEvents justify-content-center align-content-center">
            <h3>@errorMessage</h3>
        </div>
    }

    <a href="/vehicles" class="btn btn-primary mt-2">Назад</a>
}

@code {
    private bool isLoading = true;
    private string errorMessage = "Ошибка при загрузке. Попробуйте обновить страницу :(";

    [Parameter]
    public string id { get; set; } = string.Empty;
    private VehicleDetailDTO? vehicleDetail;

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            if (Guid.TryParse(id, out var parsedId))
            {
                var response = await HttpClient.GetAsync($"api/vehicles/{parsedId}");
                if (response.IsSuccessStatusCode)
                {
                    var result = await response.Content.ReadFromJsonAsync<VehicleDetailDTO>();
                    if (result != null)
                    {
                        vehicleDetail = result;
                    }
                    else
                    {
                        errorMessage = "Данные не найдены.";
                    }
                }
                else
                {
                    errorMessage = $"Ошибка загрузки данных: {response.ReasonPhrase}";
                }
            }
            else
            {
                errorMessage = "Неверный формат GUID.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Произошла ошибка: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}
