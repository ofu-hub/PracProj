@page "/vehicles/{id:Guid}"

@using AccessModuleSystem.Models.Enums
@using AccessModuleSystem.Contracts.Vehicle
@using AccessModuleSystem.Client.Extensions
@using System.Globalization

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

@attribute [Authorize]

<PageTitle>Детали транспортного средства</PageTitle>

@if (isLoading)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Идет загрузка, пожалуйста, подождите...</span>
        </div>
    </div>
}
else
{
    if (vehicleDetail is not null)
    {
        <h1>Детали транспортного средства №@vehicleDetail.Id</h1>

        <hr />
        <div class="card card-tight mb-1 card-top-no-radius">
            <div class="card-header">
                <h4>Информация о транспорте</h4>
            </div>
            <div class="card-body">
                @if (isEditing) 
                {
                    <EditForm Model="@vehicleDetailForEdit" OnValidSubmit="SaveVehicleChanges">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="form-group">
                            <label for="licensePlate">Номерной знак автомобиля</label>
                            <InputText id="licensePlate" class="form-control" @bind-Value="vehicleDetailForEdit.LicensePlate" />
                        </div>

                        <div class="form-group">
                            <label for="ownerName">Имя владельца</label>
                            <InputText id="ownerName" class="form-control" @bind-Value="vehicleDetailForEdit.OwnerName" />
                        </div>

                        <div class="form-group">
                            <label for="status">Статус разрешения</label>
                            <InputSelect id="status" class="form-control" @bind-Value="vehicleDetailForEdit.Status">
                                @foreach (var status in Enum.GetValues<PermissionStatus>())
                                {
                                    <option value="@status">@status</option>
                                }
                            </InputSelect>
                        </div>

                        <div class="form-group">
                            <label for="deactivationAt">Дата деактивации</label>
                            <InputDate id="deactivationAt" class="form-control" @bind-Value="vehicleDetailForEdit.DeactivationAt" />
                        </div>
                    </EditForm>
                }
                else 
                {
                    @if (isSuccessMessageVisible)
                    {
                        <div class="alert alert-success" role="alert">
                            Данные успешно изменены!
                        </div>
                    }
                    <dl class="row">
                        <dt class="col-sm-2">Имя владельца:</dt>
                        <dd class="col-sm-10">@vehicleDetail.OwnerName</dd>

                        <dt class="col-sm-2">Номерной знак автомобиля:</dt>
                        <dd class="col-sm-10">@vehicleDetail.LicensePlate</dd>

                        <dt class="col-sm-2">Статус разрешения:</dt>
                        <dd class="col-sm-10">@vehicleDetail.Status.GetDisplayName()</dd>

                        <dt class="col-sm-2">Дата добавления:</dt>
                        <dd class="col-sm-10">@vehicleDetail.CreatedAt.ToLongDateString()</dd>

                        <dt class="col-sm-2">Дата деактивации:</dt>
                        <dd class="col-sm-10">@vehicleDetail.DeactivationAt?.ToLongDateString()</dd>
                    </dl>

                    @if (vehicleDetail.User is not null)
                    {
                        <div class="card card-tight mb-1 card-bottom-no-radius">
                            <div class="card-header">
                                <h4>Информация о пользователе</h4>
                            </div>
                            <div class="card-body">
                                <dl class="row">
                                    <dt class="col-sm-2">Логин:</dt>
                                    <dd class="col-sm-10">@vehicleDetail.User.Username</dd>

                                    <dt class="col-sm-2">Электронный адрес:</dt>
                                    <dd class="col-sm-10">@vehicleDetail.User.Email</dd>

                                    <dt class="col-sm-2">Дата создания аккаунта:</dt>
                                    <dd class="col-sm-10">@vehicleDetail.User.CreatedAt</dd>

                                    <dt class="col-sm-2">ФИО:</dt>
                                    <dd class="col-sm-10">@string.Format($"{vehicleDetail.User.Surname} {vehicleDetail.User.Name} {vehicleDetail.User.Patronymic}")</dd>

                                    <dt class="col-sm-2">Роль в системе:</dt>
                                    <dd class="col-sm-10">@vehicleDetail.User.Role.GetDisplayName()</dd>

                                    <dt class="col-sm-2">Блокировка:</dt>
                                    <dd class="col-sm-10">@vehicleDetail.User.IsBlocked</dd>
                                </dl>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>

        <div class="d-flex mt-3">
            <a href="/vehicles" class="btn btn-primary">Назад</a>

            <div>
                @if (!isEditing)
                {
                    <a href="javascript:void(0);" @onclick="EnableEditMode" class="btn btn-secondary">Редактировать</a>
                }
            </div>

            <div>
                @if (isEditing)
                {
                    <button type="submit" class="btn btn-success" @onclick="SaveVehicleChanges">Сохранить изменения</button>
                }
            </div>
        </div>
    }
    else
    {
        <div class="accessEvents justify-content-center align-content-center">
            <h3>@errorMessage</h3>
        </div>
    }
}

@code {
    private bool isLoading = true;
    private string errorMessage = "Ошибка при загрузке. Попробуйте обновить страницу :(";

    [Parameter]
    public string id { get; set; } = string.Empty;

    private bool isEditing = false;
    private bool isSuccessMessageVisible = false;

    private VehicleDetailDTO? vehicleDetail;
    private VehicleUpdateDTO vehicleDetailForEdit = new VehicleUpdateDTO();

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            // Получаем параметры запроса
            var queryParameters = NavigationManager.ToAbsoluteUri(NavigationManager.Uri).Query;
            isEditing = queryParameters.Contains("edit=true");
            isSuccessMessageVisible = queryParameters.Contains("success=true");

            if (Guid.TryParse(id, out var parsedId))
            {
                var response = await HttpClient.GetAsync($"api/vehicles/{parsedId}");
                if (response.IsSuccessStatusCode)
                {
                    var result = await response.Content.ReadFromJsonAsync<VehicleDetailDTO>();
                    if (result != null)
                    {
                        vehicleDetail = result;
                        if (isEditing)
                        {
                            vehicleDetailForEdit = new VehicleUpdateDTO
                            {
                                Status = result.Status,
                                DeactivationAt = result.DeactivationAt,
                                LicensePlate = result.LicensePlate,
                                OwnerName = result.OwnerName
                            };
                        }
                    }
                    else
                    {
                        errorMessage = "Данные не найдены.";
                    }
                }
                else
                {
                    errorMessage = $"Ошибка загрузки данных: {response.ReasonPhrase}";
                }
            }
            else
            {
                errorMessage = "Неверный формат GUID.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Произошла ошибка: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged(); // Обновляем состояние компонента после загрузки данных
        }
    }

    private void EnableEditMode()
    {
        // Переходим в режим редактирования с параметром запроса
        NavigationManager.NavigateTo($"/vehicles/{id}?edit=true", true); // Обновляем страницу
    }

    private async Task SaveVehicleChanges()
    {
        // Преобразуем дату в UTC
        if (vehicleDetailForEdit.DeactivationAt.HasValue)
        {
            vehicleDetailForEdit.DeactivationAt = vehicleDetailForEdit.DeactivationAt.Value.ToUniversalTime();
        }

        try
        {
            var response = await HttpClient.PutAsJsonAsync($"api/vehicles/{id}", vehicleDetailForEdit);
            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo($"/vehicles/{id}?success=true", true);
            }
            else
            {
                errorMessage = $"Ошибка сохранения данных: {response.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Произошла ошибка при сохранении: {ex.Message}";
        }
    }
}
