@page "/viewevents"
@using AccessModuleSystem.Models.Enums
@using AccessModuleSystem.Contracts.AccessEvent
@using AccessModuleSystem.Client.Extensions
@using System.Text
@using System.Globalization

@inject HttpClient HttpClient

@attribute [Authorize]

<PageTitle>Просмотр и анализ событий доступа</PageTitle>

<h1>Просмотр и анализ событий доступа</h1>

<hr />

@if (isLoading)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Идет загрузка, пожалуйста, подождите...</span>
        </div>
    </div>
}
else 
{
    @if (filteredItems != null && accessEventsList != null)
    {
        <div class="filterMenu sticky-top">
            <!-- Поля для фильтров -->
            <div class="mb-3">
                <label>Фильтр по типу события:</label>
                <select @bind="selectedAccessType" class="form-select">
                    <option value="">Все</option>
                    @foreach (var type in Enum.GetValues(typeof(AccessType)))
                    {
                        <option value="@type">@((AccessType)type)</option>
                    }
                </select>
            </div>

            <div class="mb-3">
                <label>Фильтр по статусу доступа:</label>
                <select @bind="selectedAccessStatus" class="form-select">
                    <option value="">Все</option>
                    @foreach (var status in Enum.GetValues(typeof(AccessStatus)))
                    {
                        <option value="@status">@((AccessStatus)status)</option>
                    }
                </select>
            </div>

            <div class="mb-3">
                <label>Фильтр по времени (начальная и конечная дата):</label>
                <div class="d-flex">
                    <input type="date" @bind="startDate" class="form-control me-2" placeholder="Начальная дата" />
                    <input type="date" @bind="endDate" class="form-control" placeholder="Конечная дата" />
                </div>
            </div>

            <input type="text" @bind="searchQuery" placeholder="Поиск по номеру машины..." class="form-control mb-3" />

            <!-- Кнопка для выполнения поиска -->
            <button @onclick="PerformSearch" class="btn btn-primary mb-3">Применить фильтры</button>
            <button @onclick="ClearPerformSearch" class="btn btn-primary mb-3">Сбросить фильтры</button>
        </div>

        <!-- Прокручиваемый контейнер для списка -->
        <div class="list-group-container">
            <div class="list-group">
                @foreach (var item in filteredItems)
                {
                    <a href="/viewevents-details/@item.Id.ToString()" class="list-group-item list-group-item-action">
                        <div class="d-flex w-100 justify-content-between">
                            <p class="badge rounded-pill @GetBadgeClass(item.Status)">
                                @item.Status.GetDisplayName()
                            </p>
                            <small class="text-muted">@item.Timestamp.ToString("g", CultureInfo.CurrentCulture)</small>
                        </div>
                        <h5 class="mb-1">@item.AccessType.GetDisplayName()</h5>
                        <h6 class="mb-1">@item.LicensePlate</h6>
                    </a>
                }
            </div>
        </div>
    }
    else 
    {
        <div class="accessEvents justify-content-center align-content-center">
            <h3>Список событий к сожалению пустой :(</h3>
        </div>
    }
}

@code {
    private bool isLoading = true;

    private string searchQuery = string.Empty;
    private string selectedAccessType = string.Empty;
    private string selectedAccessStatus = string.Empty;
    private DateTime? startDate;
    private DateTime? endDate;

    private List<AccessEventReadDTO>? accessEventsList;

    private List<AccessEventReadDTO>? filteredItems;

    // Метод для выполнения поиска
    private void PerformSearch()
    {
        filteredItems = accessEventsList?
        .Where(item =>
            (string.IsNullOrEmpty(selectedAccessType) || item.AccessType.ToString() == selectedAccessType) &&
            (string.IsNullOrEmpty(selectedAccessStatus) || item.Status.ToString() == selectedAccessStatus) &&
            (!startDate.HasValue || item.Timestamp.Date >= startDate.Value.Date) &&
            (!endDate.HasValue || item.Timestamp.Date <= endDate.Value.Date) &&
            (string.IsNullOrEmpty(searchQuery) || item.LicensePlate.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)))
            .ToList();
    }

    private void ClearPerformSearch() 
    {
        startDate = default;
        endDate = default;
        searchQuery = string.Empty;
        selectedAccessStatus = string.Empty;
        selectedAccessType = string.Empty;
        filteredItems = accessEventsList;
    }

    private string GetBadgeClass(AccessStatus status)
    {
        return status switch
        {
            AccessStatus.Granted => "bg-success",
            AccessStatus.Denied => "bg-danger",
            _ => "bg-secondary"
        };
    }
    protected override async Task OnInitializedAsync()
    {
        var response = await HttpClient.GetAsync("api/AccessEvent");

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<List<AccessEventReadDTO>>();

            if (result != null && result.Count > 0)
            {
                accessEventsList = result.Take(5).OrderByDescending(x => x.Timestamp).ToList();
                filteredItems = accessEventsList;
                isLoading = false;
            }
        }
    }
}
