@page "/users/add"
@using AccessModuleSystem.Models.Enums
@using AccessModuleSystem.Contracts.User
@using AccessModuleSystem.Client.Extensions
@using System.Globalization
@using System.Net.Http.Json
@inject HttpClient HttpClient

@attribute [Authorize]

<PageTitle>Добавить пользователя</PageTitle>

@if (isLoading)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Идет загрузка, пожалуйста, подождите...</span>
        </div>
    </div>
}
else
{
    <div class="container">
        <h3 class="mt-4">Добавить нового пользователя</h3>
        <EditForm Model="@user" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label for="username" class="form-label">Имя пользователя</label>
                <InputText id="username" class="form-control" @bind-Value="user.Username" />
                <ValidationMessage For="@(() => user.Username)" />
            </div>

            <div class="mb-3">
                <label for="name" class="form-label">Имя</label>
                <InputText id="name" class="form-control" @bind-Value="user.Name" />
                <ValidationMessage For="@(() => user.Name)" />
            </div>

            <div class="mb-3">
                <label for="surname" class="form-label">Фамилия</label>
                <InputText id="surname" class="form-control" @bind-Value="user.Surname" />
                <ValidationMessage For="@(() => user.Surname)" />
            </div>

            <div class="mb-3">
                <label for="patronymic" class="form-label">Отчество</label>
                <InputText id="patronymic" class="form-control" @bind-Value="user.Patronymic" />
            </div>

            <div class="mb-3">
                <label for="email" class="form-label">Электронная почта</label>
                <InputText id="email" class="form-control" @bind-Value="user.Email" />
                <ValidationMessage For="@(() => user.Email)" />
            </div>

            <div class="mb-3">
                <label for="password" class="form-label">Пароль</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="user.Password" />
                <ValidationMessage For="@(() => user.Password)" />
            </div>

            <div class="mb-3">
                <label for="role" class="form-label">Роль</label>
                <InputSelect id="role" class="form-select" @bind-Value="user.Role">
                    @foreach (var role in Enum.GetValues<UserRole>())
                    {
                        <option value="@role">@role</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => user.Role)" />
            </div>

            <button type="submit" class="btn btn-primary">Сохранить</button>
        </EditForm>

        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="alert alert-success mt-3">
                @successMessage
            </div>
        }

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger mt-3">
                @errorMessage
            </div>
        }
    </div>
}

@code {
    private bool isLoading = false;
    private UserCreateDTO user = new();
    private string? successMessage;
    private string? errorMessage;

    private async Task HandleValidSubmit()
    {
        isLoading = true;
        successMessage = null;
        errorMessage = null;

        try
        {
            var response = await HttpClient.PostAsJsonAsync("api/users", user);

            if (response.IsSuccessStatusCode)
            {
                successMessage = "Пользователь успешно добавлен.";
                user = new(); // Сброс формы
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = $"Ошибка: {error}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Произошла ошибка: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}
